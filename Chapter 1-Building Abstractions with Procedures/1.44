#lang sicp
(define (compose f g)
  (lambda (x) (f(g x))))

(define (square a)
  (* a a))

(define (identity a) a)
(define (repeated f n)
  (define (itv n result)
   
    (if (= n 0)
        result
        (itv (- n 1) (compose result f))))
  (itv n identity))

(define dx 0.000001)

(define (smoothe f)
  (lambda (x) (/(+ (f (- x dx)) (f x) (f(+ x dx)))3)))

(define (n-fold-smooth f n) 
   ((repeated smooth n) f)) 

