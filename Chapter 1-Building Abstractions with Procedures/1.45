#lang sicp


(define tolerance 0.00001)
(define (fixed-point f first-guess)

  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average-damp f)
  (lambda (x) (/(+ x (f x)) 2)))
(define (compose f g)
  (lambda (x) (f(g x))))
  
(define (identity a) a)
(define (repeated f n)
  (define (itv n result)
   
    (if (= n 0)
        result
        (itv (- n 1) (compose result f))))
  (itv n identity))
  
(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))

;Experiments
 ;(((repeated average-damp) k)
; 2nd needed 1
; 3rd needed 1
 ; 4th needed 2
; 5th needed 2
; 6th needed 2
; 7 needed 2
; 8 needs 3
; 11 needs 3
;15 works with 3
;16 needs 4
;looks like it works in powers of 2


(define (groot Xroot num)
  (define (log2 x) (/ (log x) (log 2)))
  (floor(log2 Xroot))
 
(define (root x)
  (fixed-point ((repeated average-damp (floor(log2 Xroot)))(lambda (y) (/ x (expt y (- Xroot 1)))))
               1.0))

 (root num))

(groot 4 10000)