#lang sicp
(define (cube x)
  (* x x x))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (simp f a b n)
  (define (h a b n)
    (/ (- b a) n))
  (define (Yk k)
    (f(+ a (* k (h a b n)))))
  (define (next k)
    (+ k 1))
  (define (term k)
    (cond ((= k 0)(Yk 0))
          ((= k n)(Yk n))
          ((odd? k)(* 4 (Yk k)))
          (else (* 2 (Yk k)))))
  (sum term 0 next n))

(simp cube 0 1 100)



this code doesnt work 

this code doesnt#lang sicp
(define (cube x)
  (* x x x))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (simp f a b n)
  (define h
    (/ (- b a) n))
  (define (Yk k)
    (f(+ a (* k h))))
  (define (term k)
    (cond ((= k 0)(Yk 0))
          ((= k n)(Yk n))
          ((odd? k)(* 4 (Yk k)))
          (else (* 2 (Yk k)))))
  (* (/ h 3)(sum term 0 inc n)))

(simp cube 0 1 100)