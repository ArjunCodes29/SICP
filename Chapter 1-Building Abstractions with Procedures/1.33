#lang sicp
(define (filtered-accumulate combiner null-value term a next b predicate)
    (if (> a b)
      null-value
      (if (predicate a )
      (combiner (term a)
                (filtered-accumulate combiner null-value term (next a) next b predicate))
      (combiner null-value (filtered-accumulate combiner null-value term (next a) next b predicate)))))

(define (square x)
  (* x x))

(define (prime? n)
  (let loop ((d 2))
    (cond ((< n (* d d)) #t)
          ((zero? (modulo n d)) #f)
          (else (loop (+ d 1))))))
(define (plus x y)
  (+ x y))

(define (square-prime a b)
  (- (filtered-accumulate plus 0 square a inc b prime?) 1))

(square-prime 1 10)



(define (product-integers n)
  (define (identity x) x)
  (define (predicatea a )
    (define (gcd a n)
      (cond ((< a n ) (gcd n a))
            ((= n 0) a)
            (else (gcd n (remainder a n)))))
    (if (= (gcd a n) 1) #true))
  (filtered-accumulate * 1 identity 1 inc n predicatea))

(product-integers 4)