#lang sicp
 (define (make-interval a b) 
         (if (< a b) 
                 (cons a b) 
                 (cons b a))) 
(define (upper-bound z)(cdr z))

(define (lower-bound z )(car z))

(define (sub-interval a b)
  (make-interval
   (- (lower-bound a)(upper-bound b))
   (- (upper-bound a) (lower-bound b))))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((lbx  (lower-bound x))
        (ubx (upper-bound x))
        (lby  (lower-bound y))
        (uby (upper-bound y)))
    (cond ((and (> lbx 0)(> ubx 0)(> lby 0)(> uby 0))
           (make-interval (* lbx lby)(* ubx uby)))
          ((and (< lbx 0)(> ubx 0)(> lby 0)(> uby 0))
           (make-interval (* lbx uby)(* ubx uby)))
          ((and (< lbx 0)(< ubx 0)(> lby 0)(> uby 0))
           (make-interval (* lbx uby)(* ubx lby)))
          ((and (< lbx 0)(< ubx 0)(< lby 0)(> uby 0))
           (make-interval (* ubx lby)(* lbx lby)))
          ((and (< lbx 0)(< ubx 0)(< lby 0)(< uby 0))
           (make-interval (* ubx uby)(* lbx lby)))
          ((and (> lbx 0)(> ubx 0)(< lby 0)(> uby 0))
           (make-interval (* lbx lby)(* ubx uby)))
          ((and (> lbx 0)(> ubx 0)(< lby 0)(< uby 0))
           (make-interval (* lby ubx)(* uby lbx)))
          ((and (< lbx 0)(> ubx 0)(< lby 0)(< uby 0))
           (make-interval (* ubx uby)(* lbx uby))))))


                   
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))




(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))


(define (make-center-percent c tolerance)

  (make-interval (- c (/(* c tolerance) 100))(+ c (/(* c tolerance) 100))))
(define (percent i)
  (* (/ (width i)(center i)) 100))




    