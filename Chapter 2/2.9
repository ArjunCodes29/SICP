#lang sicp
(define (make-interval a b) (cons a b))

(define (upper-bound z)(cdr z))

(define (lower-bound z )(car z))

(define (sub-interval a b)
  (make-interval
   (- (lower-bound a)(upper-bound b))
   (- (upper-bound a) (lower-bound b))))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))
(define (width z)
  (/(- (upper-bound z) (lower-bound z))2))
(define a (make-interval 120 1115))
(define b (make-interval 10 20))
(width a)
(width b)
;(width(add-interval a b))
; Results of add 2.5, 5, 7.5. -> Conclusion the width of the new interval is
; the sum of the width of the argument intervals

;(width(sub-interval a b))
; The width also stays the same during substraction
; function is adding the width of botht the argument intevals

;(width(mul-interval a b))
; No clear pattern as the width randomly becomes 50

(width(div-interval a b))
;No clear pattern


