#lang sicp
(define (square x)(* x x ))

(define (square-tree tree)
  
  (cond ((null? tree) nil)
        ((not(pair? tree))(square tree))
        (else (cons (square-tree (car tree))
                    (square-tree (cdr tree))))))


(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
; The above was successful  returned (1 (4 (9 16) 25) (36 49))

(define (map proc list)
 (if (null? list)
     nil
     (cons (proc (car list))(map proc (cdr list)))))

(define (square-tree-HO tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree-HO sub-tree)
             (square sub-tree)))
       tree))

(square-tree-HO
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))